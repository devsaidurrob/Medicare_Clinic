@model Medicare.ViewModels.LoginViewModel
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login - Hospital Management System</title>

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" />
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
    <!-- Custom CSS -->
    <style>
        :root {
            --primary-color: #0d6efd;
            --secondary-color: #6c757d;
            --success-color: #198754;
            --hospital-blue: #2A5C99;
            --hospital-light-blue: #E8F1FF;
        }

        body {
            background-color: #f8f9fa;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .login-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            width: 100%;
            max-width: 400px;
            animation: fadeIn 0.5s ease-in-out;
        }

        .login-header {
            background-color: var(--hospital-blue);
            color: white;
            padding: 1.5rem;
            text-align: center;
        }

            .login-header i {
                font-size: 2.5rem;
                margin-bottom: 0.5rem;
            }

        .login-body {
            padding: 2rem;
        }

        .form-control:focus {
            border-color: var(--hospital-blue);
            box-shadow: 0 0 0 0.25rem rgba(42, 92, 153, 0.25);
        }

        .btn-login {
            background-color: var(--hospital-blue);
            border-color: var(--hospital-blue);
            color: white;
            padding: 0.5rem 1.5rem;
            width: 100%;
            transition: all 0.3s;
        }

            .btn-login:hover {
                background-color: #1e4a7e;
                border-color: #1e4a7e;
                color: white;
                transform: translateY(-2px);
            }

        .login-footer {
            padding: 1rem 2rem;
            background-color: var(--hospital-light-blue);
            text-align: center;
            font-size: 0.9rem;
        }

        .divider {
            display: flex;
            align-items: center;
            margin: 1.5rem 0;
        }

            .divider::before, .divider::after {
                content: "";
                flex: 1;
                border-bottom: 1px solid #dee2e6;
            }

            .divider span {
                padding: 0 1rem;
                color: var(--secondary-color);
                font-size: 0.9rem;
            }

        .input-group-text {
            background-color: white;
        }

        .form-control.is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .form-control.is-invalid ~ .invalid-feedback {
            display: block;
        }

        @@keyframes fadeIn {
            from

        {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .password-toggle {
            cursor: pointer;
            background-color: white;
            border-left: 0;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <div class="login-header">
            <i class="bi bi-hospital"></i>
            <h4>MediCare Hospital</h4>
            <p class="mb-0">Sign in to your account</p>
        </div>

        <div class="login-body">
            <form id="loginForm" novalidate asp-action="Login" asp-controller="Account">
                <div asp-validation-summary="All" class="text-danger mb-3"></div>
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-person"></i></span>
                        <input asp-for="UserName" type="text" class="form-control" placeholder="Enter your username" required>
                        <div class="invalid-feedback" id="usernameFeedback">
                            Please provide a valid username.
                        </div>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-lock"></i></span>
                        <input asp-for="Password" type="password" class="form-control" placeholder="Enter your password" required>
                        <span class="input-group-text password-toggle" id="passwordToggle">
                            <i class="bi bi-eye"></i>
                        </span>
                        <div class="invalid-feedback" id="passwordFeedback">
                            Please provide a valid password.
                        </div>
                    </div>
                </div>

                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="rememberMe" name="rememberMe">
                    <label class="form-check-label" for="rememberMe">Remember me</label>
                </div>

                <button type="submit" class="btn btn-login">Sign In</button>

                <div class="divider">
                    <span>OR</span>
                </div>

                <div class="d-grid gap-2">
                    <button type="button" class="btn btn-outline-secondary">
                        <i class="bi bi-google me-2"></i>Sign in with Google
                    </button>
                </div>
            </form>
        </div>

        <div class="login-footer">
            <p class="mb-0">Don't have an account? <a href="#" class="text-decoration-none">Contact Administrator</a></p>
            <p class="mb-0"><a href="#" class="text-decoration-none">Forgot your password?</a></p>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('loginForm');
            const usernameInput = document.getElementById('UserName');
            const passwordInput = document.getElementById('Password');
            const passwordToggle = document.getElementById('passwordToggle');

            // Toggle password visibility
            passwordToggle.addEventListener('click', function() {
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);

                // Toggle eye icon
                const eyeIcon = this.querySelector('i');
                if (type === 'text') {
                    eyeIcon.classList.remove('bi-eye');
                    eyeIcon.classList.add('bi-eye-slash');
                } else {
                    eyeIcon.classList.remove('bi-eye-slash');
                    eyeIcon.classList.add('bi-eye');
                }
            });

            // Form validation on submit
            loginForm.addEventListener('submit', function(event) {
                event.preventDefault();

                // Reset previous validation states
                usernameInput.classList.remove('is-invalid');
                passwordInput.classList.remove('is-invalid');

                let isValid = true;

                // Validate username
                if (!usernameInput.value.trim()) {
                    usernameInput.classList.add('is-invalid');
                    document.getElementById('usernameFeedback').textContent = 'Username is required.';
                    isValid = false;
                } else if (usernameInput.value.trim().length < 3) {
                    usernameInput.classList.add('is-invalid');
                    document.getElementById('usernameFeedback').textContent = 'Username must be at least 3 characters.';
                    isValid = false;
                }

                // Validate password
                if (!passwordInput.value) {
                    passwordInput.classList.add('is-invalid');
                    document.getElementById('passwordFeedback').textContent = 'Password is required.';
                    isValid = false;
                } else if (passwordInput.value.length < 6) {
                    passwordInput.classList.add('is-invalid');
                    document.getElementById('passwordFeedback').textContent = 'Password must be at least 6 characters.';
                    isValid = false;
                }

                if (isValid) {
                    // Show loading state
                    const submitButton = loginForm.querySelector('button[type="submit"]');
                    const originalText = submitButton.textContent;
                    submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Signing in...';
                    submitButton.disabled = true;

                    loginForm.submit();

                    // Simulate API call
                    // setTimeout(() => {
                    //     // In a real application, you would make an API call here
                    //     // For demo purposes, we'll assume the login is successful
                    //     Swal.fire({
                    //         icon: 'success',
                    //         title: 'Login Successful',
                    //         text: 'Welcome back to MediCare Hospital System!',
                    //         confirmButtonColor: '#2A5C99'
                    //     }).then((result) => {
                    //         if (result.isConfirmed) {
                    //             // Reset form and button state
                    //             loginForm.reset();
                    //             submitButton.textContent = originalText;
                    //             submitButton.disabled = false;

                    //             // Redirect to dashboard (commented out for demo)
                    //             // window.location.href = '/Home/Index';
                    //         }
                    //     });
                    // }, 1500);
                }
            });

            // Real-time validation
            usernameInput.addEventListener('input', function() {
                if (this.value.trim().length > 0) {
                    this.classList.remove('is-invalid');
                }
            });

            passwordInput.addEventListener('input', function() {
                if (this.value.length > 0) {
                    this.classList.remove('is-invalid');
                }
            });
        });
    </script>
</body>
</html>